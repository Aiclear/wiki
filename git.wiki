 = Linux下Git使用 =
%toc 目录
== 安装 ==
Linux下安装git很简单，一条命令：
`sudo apt-get install git`
安装好后可以查看版本信息
输入命令：`git --version`,我的显示：
`git version 1.8.1.2`
== 创建版本库 ==
进入要创建版本库的项目所在的顶级目录，输入：
`git init`
我的显示：`Initialized empty Git repository in /home/zcq/mysite/wiki/.git/`
瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的
== 添加文件 ==
用命令`git add`来添加文件到版本库的索引。
这里添加目录下所有文件`git add ./*`
用命令`git commit`告诉Git，把文件提交到仓库,并创建提交记录。
这里用`git commit -m "add files"`
但这里提示：
{{{
 *** Please tell me who you are.

Run

  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"

to set your account's default identity.
Omit --global to set the identity only in this repository.

fatal: unable to auto-detect email address
    }}}
按照提示要求我们设置两个全局变量值。
== 设置Git ==
命令 `git config --global user.email "***@***"`设置用户邮箱
命令 `git config --global user.name "***"` 设置用户姓名
我们还可以设置在命令行终端中使用不同颜色显示不同类型的内容,将"color.ui"设置为"auto"或"always"
`git config --global color.ui auto`
用下列命令可以检查全局变量设置是否成功：
`git config --global --list`
设置完之后，再执行上面的添加文件将没问题
git配置文件为~/.gitconfig

命令`git status`会显示工作目录树的状态，即当前的视图状态
{{{
# On branch master
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#	.git.wiki.swp
#	".youcompleteme\346\217\222\344\273\266\345\256\211\350\243\205.wiki.swp"
#	git.wiki
}}}
上面的输出表面Git监测到了修改，并将修改了的文件用红色标志出来
`git diff`
git diff顾名思义就是查看difference，显示的格式正是Unix通用的diff格式
`git log -1`可以快速浏览提交留言,这里的数字用来限制git log 命令输出的提交条目的个数,加上 --pretty=oneline参数每条记录显示(版本号和提交留言)一行。
== 添加新的远程版本库 ==
Git提供了三种与远程版本库通信的协议：
- SSH
- git
- HTTP/HTTPS
# 使用ssh:
  * 创建SSH Key
  在～/.ssh/目录下有没有id_rsa和id_rsa.pub文件没有则创建
  `ssh-keygen -t rsa -C "youremail@example.com"`
  创建后在~/.ssh里文件id_rsa.pub是公钥,id_rsa是私钥
  * 向GitHub添加ssh key
    登陆GitHub，打开“Account settings”，“SSH Keys”页面,点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容
  * 创建远程库用户名
    `git remote add origin git@github.com:test/test.git`
  * 把本地库所有内容push到远程库
    `git push -u origin master`
# 使用HTTP/HTTPS
  * 根据GitHub上提示，添加用户并push即可
`git remote add origin https://github.com/test/test.git`
`git push -u origin master`

`git pull` 将github(远程)的git档案与本地的同步(即更新本地端的repo)
`git push`  将本地的git档案与github(远程)上的同步


`git clone 远程版本` 用于克隆远程版本
== 版本回退 ==
Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100
`git reset`命令回退到以前的版本
`git reset --hard HEAD^`回退到前一个版本
如果又想找回回退前的版本，只需`git reset --hard 版本号`
例如`git reset --hard d846`这里版本号只需输入前几位即可
Git提供了一个命令`git reflog`用来记录你的每一次命令,可用该命令来查看历史版本号
例如：
{{{
$ git reflog
d846459 HEAD@{0}: reset: moving to d846
87458f0 HEAD@{1}: reset: moving to HEAD^
d846459 HEAD@{2}: commit: delete some lines
87458f0 HEAD@{3}: commit: ddd
f4fb95e HEAD@{4}: commit (initial): add test.c
}}}
== 文件对比 ==
`git diff`命令可用于查看不同版本间文件对比，显示的格式正是Unix通用的diff格式
`git diff HEAD -- file`命令可以查看工作区和版本库里面最新版本的区别

如果你想要看看某一个文件的相关历史记录，可以使用git blame 命令,如：
`git blame index.html --date short`
== 工作区和暂存区 ==
把文件往Git版本库里添加的时候，是分两步执行的：
# 是用“git add”把文件添加进去，实际上就是把文件修改添加到暂存区；
# 是用“git commit”提交更改，实际上就是把暂存区的所有内容提交到当前分支。
可以简单理解为，git add命令实际上就是把要提交的所有修改通通放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支。
== 撤销修改 ==
`git checkout -- file`可以丢弃工作区的修改,将stage中内容还回工作区。
例如执行：

  命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

  一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

  一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
例如文件：readme.txt中在添加了一行内容：
add a new line and added to stage.
后执行git add readme.txt
然后再添加一行内容：
add a new line but not add to stage.
这时执行:git checkout -- readme.txt
这时工作区readme.txt的内容将回退到git add 后的状态,即：添加了内容 add a new line and added to stage.

git reset HEAD file可以把暂存区的修改撤销掉（unstage）。

如果这时再执行git reset HEAD readme.txt,这时暂存区的内容将被撤销,工作区内容将不发生变化
== 删除文件 ==
git rm用于删除一个文件。
删除过程,以文件readme.txt为例：
`rm readme.txt`
{{{
$ git status
# On branch master
# Changes not staged for commit:
#   (use "git add/rm <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#   deleted:    readme.txt
#
no changes added to commit (use "git add" and/or "git commit -a")
    }}}
如果确实要删除则：
`$ git rm readme.txt`
rm 'test.txt'
`$ git commit -m "remove readme.txt"`
[master d17efd8] remove test.txt

 1 file changed, 1 deletion(-)

 delete mode 100644 test.txt

如果是误删则恢复：
`$ git checkout -- readme.txt`
这里的git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
== 分支管理 ==
创建分支：
`git checkout -b branch_name`
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
`git branch branch_name`    创建分支
`git checkout branch_name`  切换到分支branch_name
`git branch`命令查看当前分支。 git branch命令会列出所有分支，当前分支前面会标一个*号。
`git merge branch_name`命令用于合并指定分支到当前分支。
合并分支时，如有冲突,Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容。

`git branch -d branch_name`  用于删除分支

`git log --graph --pretty=oneline --abbrev-commit`查看log,用git log --graph命令可以看到分支合并图

合并分支时，如果可能，Git会用“Fast forward”模式，但这种模式下，删除分支后，会丢掉分支信息,--no-ff的merge方式，强制禁用“Fast forward”模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。

分支管理策略：
* 首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面开发；
* 开发都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本
* 每个开发人员都在各自的dev分支上进行开发，每个人都有自己的分支，时不时地往dev分支上合并就可以了。

*分支管理策略*
参考[[http://www.ruanyifeng.com/blog/2012/07/git.html| Git分支管理策略]]
# 代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。
  Git主分支的名字，默认叫做Master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。
# 日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop(merge 时用--no-ff参数,保证版本演进的清晰)
# 临时性分支主要有三种：功能（feature）分支、预发布（release）分支、修补bug（fixbug）分支,使用完以后，应该删除，使得代码库的常设分支始终只有Master和Develop
  - 功能分支，它是为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop。`git checkout -b feature-x develop`(采用feature-*的形式命名)
  - 预发布分支，它是指发布正式版本之前,需要有一个预发布的版本进行测试。(1)`git checkout -b release-1.2 develop`（2）没问题后合并到master主分支`git checkout master``git merge --no-ff release-1.2`# 对合并生成的新节点，做一个标签`git tag -a 1.2`(3)再合并到develop分支，并删除预发布分支`git checkout develop``git merge --no-ff release-1.2``git branch -d release-1.2`
  - 修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用fixbug-*的形式。`git checkout -b fixbug-0.1 master`
== 存储工作现场 ==
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
`git stash list`查看存储的工作现场。
`git stash apply`从stash恢复现场
`git stash drop`来删除stash中内容
`git stash pop`恢复的同时把stash内容也删了(相当于上面的两条指令)
可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：`git stash apply stash@{0}`

== 删除分支 ==
要丢弃一个没有被合并过的分支，可以通过git branch -D name强行删除
== 远程分支协作 ==
查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
== 标签管理 ==
Git的标签虽然是版本库的快照。
`git tag name`可以打一个新标签，默认为HEAD。
`git tag`查看所有标签
默认标签是打在最新提交的commit上
`git tag tag_name commit_id`给对应版本号打标签
`git show tag_name`查看标签信息
还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字

`git tag -d tag_name`删除标签
`git push origin_name tagname`推送一个本地标签到远程
`git push origin --tags`可以推送全部未推送过的本地标签
`git push origin_name :refs/tags/tagname`可以删除一个远程标签
== 忽略特殊文件 ==
忽略某些文件时，需要编写.gitignore
.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理
[[https://github.com/github/gitignore| GitHub已经为我们准备了各种配置文件]]
== 配置别名 ==
alias参数配置别名
例如：
git config --global alias.st status
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
== 搭建Git服务器 ==
# 创建git用户，用于运行git服务
  `sudo adduser user_name`
# 创建证书
  把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。
# 初始化Git仓库
  `sudo git init --bare pro_name`
  更改拥有者
  `sudo chown -R git:user_name pro_name`
# 禁用shell登录
  更改/etc/passwd文件中`git:x:1001:1001:,,,:/home/git:/bin/bash`改为 `git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell`
# 克隆远程版本到各自PC
  git clone git@server:/srv/sample.git
= 资料 =
git操作资料来源于网络

[[http://my.oschina.net/shootercn/blog/13476| 使用git管理github项目]],命令综合

[[http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000|廖雪峰git教程]]
[[http://luolei.org/2013/09/git-config-advanced/| Git log diff config高级进阶]]
[[http://www.oschina.net/translate/10-useful-advanced-git-commands| 10 个很有用的高级 Git 命令]]
[[http://ux.etao.com/posts/711| 高富帅们的Git技巧]]

[[http://git-scm.com/| Git官网]]


