 = Linux下Git使用 =
%toc 目录
== 安装 ==
Linux下安装git很简单，一条命令：
`sudo apt-get install git`
安装好后可以查看版本信息
输入命令：`git --version`,我的显示：
`git version 1.8.1.2`
== 创建版本库 ==
进入要创建版本库的项目所在的顶级目录，输入：
`git init`
我的显示：`Initialized empty Git repository in /home/zcq/mysite/wiki/.git/`
瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的
== 添加文件 ==
用命令`git add`来添加文件到版本库的索引。
这里添加目录下所有文件`git add ./*`
用命令`git commit`告诉Git，把文件提交到仓库,并创建提交记录。
这里用`git commit -m "add files"`
但这里提示：
{{{
 *** Please tell me who you are.

Run

  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"

to set your account's default identity.
Omit --global to set the identity only in this repository.

fatal: unable to auto-detect email address
    }}}
按照提示要求我们设置两个全局变量值。
== 设置Git ==
命令 `git config --global user.email "***@***"`设置用户邮箱
命令 `git config --global user.name "***"` 设置用户姓名
我们还可以设置在命令行终端中使用不同颜色显示不同类型的内容,将"color.ui"设置为"auto"或"always"
`git config --global color.ui auto`
用下列命令可以检查全局变量设置是否成功：
`git config --global --list`
设置完之后，再执行上面的添加文件将没问题

命令`git status`会显示工作目录树的状态，即当前的视图状态
{{{
# On branch master
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#	.git.wiki.swp
#	".youcompleteme\346\217\222\344\273\266\345\256\211\350\243\205.wiki.swp"
#	git.wiki
}}}
上面的输出表面Git监测到了修改，并将修改了的文件用红色标志出来
`git diff`
git diff顾名思义就是查看difference，显示的格式正是Unix通用的diff格式
`git log -1`可以快速浏览提交留言,这里的数字用来限制git log 命令输出的提交条目的个数,加上 --pretty=oneline参数每条记录显示(版本号和提交留言)一行。
== 添加新的远程版本库 ==
Git提供了三种与远程版本库通信的协议：
- SSH
- git
- HTTP/HTTPS
# 使用ssh:
  * 创建SSH Key
  在～/.ssh/目录下有没有id_rsa和id_rsa.pub文件没有则创建
  `ssh-keygen -t rsa -C "youremail@example.com"`
  创建后在~/.ssh里文件id_rsa.pub是公钥,id_rsa是私钥
  * 向GitHub添加ssh key
    登陆GitHub，打开“Account settings”，“SSH Keys”页面,点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容
  * 创建远程库用户名
    `git remote add origin git@github.com:test/test.git`
  * 把本地库所有内容push到远程库
    `git push -u origin master`
# 使用HTTP/HTTPS
  * 根据GitHub上提示，添加用户并push即可
`git remote add origin https://github.com/test/test.git`
`git push -u origin master`

`git pull` 将github(远程)的git档案与本地的同步(即更新本地端的repo)
`git push`  将本地的git档案与github(远程)上的同步
== 版本回退 ==
Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100
`git reset`命令回退到以前的版本
`git reset --hard HEAD^`回退到前一个版本
如果又想找回回退前的版本，只需`git reset --hard 版本号`
例如`git reset --hard d846`这里版本号只需输入前几位即可
Git提供了一个命令`git reflog`用来记录你的每一次命令,可用该命令来查看历史版本号
例如：
{{{
$ git reflog
d846459 HEAD@{0}: reset: moving to d846
87458f0 HEAD@{1}: reset: moving to HEAD^
d846459 HEAD@{2}: commit: delete some lines
87458f0 HEAD@{3}: commit: ddd
f4fb95e HEAD@{4}: commit (initial): add test.c
}}}
== 工作区和暂存区 ==
把文件往Git版本库里添加的时候，是分两步执行的：
# 是用“git add”把文件添加进去，实际上就是把文件修改添加到暂存区；
# 是用“git commit”提交更改，实际上就是把暂存区的所有内容提交到当前分支。
可以简单理解为，git add命令实际上就是把要提交的所有修改通通放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支。

= 资料 =
git操作资料来源于网络

[[http://my.oschina.net/shootercn/blog/13476| 使用git管理github项目]],命令综合

[[http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000|廖雪峰git教程]]


