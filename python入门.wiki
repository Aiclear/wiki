 == Python入门 ==
%toc 目录
=== 参考资料 ===
编码风格:http://google-styleguide.googlecode.com/svn/trunk/pyguide.html http://www.bsdmap.com/articles/zh-google-python-style-guide/
[[http://docs.python.org/| 官方文档]]
=== 为什么学Python ===
一个程序员至少得会一门脚本语言，自己有个什么想法或算法要实现其原型或进行验证，使用脚本语言来实现将比C/C++更节约时间，能快速实现并验证也能提升自己编程的积极性，并沉浸在解决问题的快乐之中。本人目前只会shell脚本。开始也在选择到底是学习那门脚本语言好呢,perl?ruby?还是python呢？其实不用纠结，它们各有优缺点，但只要学好一门将受用无穷。记得以前看过的Eric S. Raymond写的《黑客白皮书》中推崇从python开始学，不要因为鞋里的一颗沙子而放弃旅程，不管那么多了，那就它了。现在教研室一个Linux内核相关项目结了，有时间开始新的学习，那就义不容辞开始一段轻松快乐的学习旅程把。。。
    Life is short, use Python!
=== 安装Python ===
Ubuntu下面默认是安装了Python的，`python -V`可以查看版本信息，我的是Python 2.7.4

如果没有可以：
`sudo apt-get install python`

== Hello World ==
老惯例,首先Hello World.
- 使用交互模式
在终端输入$python,启动解释器
    >>>print 'Hello World'
回车，其中>>>是你键入Python语句的提示符,要退出Python提示符,可以Ctrl+d,或者输入exit()
- 使用程序模式
编写脚本源文件。用文本编辑器写一个.py结尾的文件，$gvim hello.py
输入内容
{{{
#!/usr/bin/env python
# encoding: utf-8

print 'hello world'
    }}}
执行`python hello.py`
- 可执行的Python程序
 `chmod +x hello.py` #变成可执行文件
 `./hello.py`
== 获取帮助 ==
在交互模式下函数help()获取帮助
>>>`help(str)`  将显示str类的帮助信息，q推出
== 基本数据类型 ==
Python的变量不需要声明
{{{
>>> a = 10
>>> print a
10
>>> print type(a)
<type 'int'>
    }}}
回收变量名:如果你想让a存储不同的数据，你不需要删除原有变量就可以直接赋值
{{{
>>> a = 1.1
>>> print a,type(a)
1.1 <type 'float'>
}}}
* python的基本数据类型
 - a=10         # int 整数
 - a=1.3        # float 浮点数
 - a=True       # 真值 (True/False)
 - a='Hello!'   # 字符串(也可以用双引号"),所有的空白，即空格和制表符都照原样保留
 - a='''a
     b'''       #利用三引号字符串（也可以是三个双引号"""），你可以指示一个多行的字符串。你可以在三引号中自由的使用单引号和双引号
(注意：在一个字符串中，行末的单独一个反斜杠表示字符串在下一行继续,在''内表示的字符串中要表示'号，则使用转义符\`)
=== 序列(sequence) ===
sequence(序列)是一组有顺序的元素的集合。
序列有两种：tuple和list
tuple和list的主要区别在于，一旦建立，tuple的各个元素不可再变更，而list的各个元素可以再变更。
例如：
>>>s1 = ('a', 'b')  # s1是tuple
>>>`s2 = ['c', True]` # s2是list
>>>`s3 = []`        # 空序列
>>>`s4 = [1,[3,4,5]]` #一个序列作为另一个序列的元素
* 序列元素的引用,序列元素的下标从0开始
例如：
>>>`print s1[0]`
>>>`print s3[1][2]`
* 范围引用： 基本样式[下限:上限:步长]
{{{
>>>print s1[:5]             # 从开始到下标4 （下标5的元素 不包括在内）
>>>print s1[2:]             # 从下标2到最后
>>>print s1[0:5:2]          # 从下标0到下标4 (下标5不包括在内)，每隔2取一个元素 （下标为0，2，4的元素）
>>>print s1[2:0:-1]         # 从下标2到下标1
}}}
* 尾部元素引用
{{{
>>>print s1[-1]             # 序列最后一个元素
>>>print s1[-3]             # 序列倒数第三个元素
    }}}
* 字符串是一种tuple,可以作为tuple来进行下标引用操作

注意：字符串(string)是一种特殊的tuple。

序列的内建函数,由于tuple不可改变序列本身，有些内建函数只适用于list
| 函数         | 适用        | 功能                                         |
|--------------|-------------|----------------------------------------------|
| len(s)       | tuple、list | 返回：序列中包含元素的个数                   |
| min(s)       | tuple、list | 返回：序列中最小的元素                       |
| max(s)       | tuple、list | 返回：序列中最大的元素                       |
| all(s)       | tuple、list | 返回：True, 如果所有元素都为True的话         |
| any(s)       | tuple、list | 返回：True, 如果任一元素为True的话           |
| sum(s)       | tuple、list | 返回：序列中所有元素的和                     |
| s.count(x)   | tuple、list | 返回： x在s中出现的次数                      |
| s.index(x)   | tuple、list | 返回： x在s中第一次出现的下标                |
| l.extend(l2) | list        | 在表l的末尾添加表l2的所有元素                |
| l.append(x)  | list        | 在l的末尾附加x元素                           |
| l.sort()     | list        | 对l中的元素排序                              |
| l.reverse()  | list        | 将l中的元素逆序                              |
| l.pop()      | list        | 返回：表l的最后一个元素，并在表l中删除该元素 |
| del l[i]     | list        | 删除该元素                                   |

下面是一些用于字符串的方法。尽管字符串是定值表的特殊的一种，但字符串(string)类有一些方法是改变字符串的。
| 函数                      | 功能                                                                          |
|---------------------------|-------------------------------------------------------------------------------|
| str.count(sub)            | 返回：sub在str中出现的次数                                                    |
| str.find(sub)             | 返回：从左开始，查找sub在str中第一次出现的位置。如果str中不包含sub，返回 -1   |
| str.index(sub)            | 返回：从左开始，查找sub在str中第一次出现的位置。如果str中不包含sub，举出错误  |
| str.rfind(sub)            | 返回：从右开始，查找sub在str中第一次出现的位置。如果str中不包含sub，返回 -1   |
| str.rindex(sub)           | 返回：从右开始，查找sub在str中第一次出现的位置。如果str中不包含sub，举出错误  |
| str.isalnum()             | 返回：True， 如果所有的字符都是字母或数字                                     |
| str.isalpha()             | 返回：True，如果所有的字符都是字母                                            |
| str.isdigit()             | 返回：True，如果所有的字符都是数字                                            |
| str.istitle()             | 返回：True，如果所有的词的首字母都是大写                                      |
| str.isspace()             | 返回：True，如果所有的字符都是空格                                            |
| str.islower()             | 返回：True，如果所有的字符都是小写字母                                        |
| str.isupper()             | 返回：True，如果所有的字符都是大写字母                                        |
| str.split([sep, [max]])   | 返回：从左开始，以空格为分割符(separator)，将str分割为多个子字符串，          |
| \/                        | 总共分割max次。将所得的子字符串放在一个表中返回。                             |
| \/                        | 可以str.split(',')的方式使用逗号或者其它分割符                                |
| str.rsplit([sep, [max]])  | 返回：从右开始，以空格为分割符(separator)，将str分割为多个子字符串，          |
| \/                        | 总共分割max次。将所得的子字符串放在一个表中返回。                             |
| \/                        | 可以str.rsplit(',')的方式使用逗号或者其它分割符                               |
| str.join(s)               | 返回：将s中的元素，以str为分割符，合并成为一个字符串。                        |
| str.strip([sub])          | 返回：去掉字符串开头和结尾的空格。可以供参数sub,去掉位于字符串开头和结尾的sub |
| str.replace(sub, new_sub) | 返回：用一个新的字符串new_sub替换str中的sub                                   |
| str.capitalize()          | 返回：将str第一个字母大写                                                     |
| str.lower()               | 返回：将str全部字母改为小写                                                   |
| str.upper()               | 返回：将str全部字母改为大写                                                   |
| str.swapcase()            | 返回：将str大写字母改为小写，小写改为大写                                     |
| str.title()               | 返回：将str的每个词(以空格分隔)的首字母大写                                   |
| str.center(width)         | 返回：长度为width的字符串，将原字符串放入该字符串中心，其它空余位置为空格。   |
| str.ljust(width)          | 返回：长度为width的字符串，将原字符串左对齐放入该字符串，其它空余位置为空格。 |
| str.rjust(width)          | 返回：长度为width的字符串，将原字符串右对齐放入该字符串，其它空余位置为空格。 |
=== 缩进 ===
行首的空白（空格和制表符）用来决定逻辑行的缩进层次，从而用来决定语句的分组。这意味着同一层次的语句必须有 *相同的缩进* 。每一组这样的语句称为一个 *块* 。
=== 运算符与表达式 ===

| 运算符 | 名称     |
|--------|----------|
| +      | 加       |
| -      | 减       |
| *      | 乘       |
| **     | 幂       |
| /      | 除       |
| //     | 取整除   |
| %      | 取模     |
| <<     | 左移     |
| >>     | 右移     |
| &      | 按位与   |
|        | 按位或   |
| ^      | 按位异或 |
| ~      | 按位翻转 |
| <      | 小于     |
| *>*    | 大于     |
| <=     | 小于等于 |
| >=     | 大于等于 |
| ==     | 等于     |
| !=     | 不等于   |
| not    | 布尔“非” |
| and    | 布尔“与” |
| or     | 布尔“或” |
=== 控制流 ===
* if条件判断
{{{
if  <条件1>:
    statement
elif <条件2>:
    statement
else:
    statement
    }}}
记住，python中用缩进来表示语句块。
在Python中没有switch语句。你可以使用if..elif..else语句来完成同样的工作
* while循环
{{{
    while <条件>:
    statement
    }}}
* for循环
{{{
for 元素 in 序列:
    statement
}}}
例如：
{{{
for i in [1, 2, 3, True, 'string']:
    print i
    }}}
* 循环控制
continue   # 在同一循环的某一环，如果遇到continue, 那么跳过这一环，进行下一次环的操作

break      # 停止执行整个循环
=== 函数 ===
函数是重用的程序段。
{{{
def function_name(a,b,c):
    statement
    return something  # return不是必须的
    }}}
函数通过def关键字定义。例如：
{{{
def sum(a, b):
    c = a + b
    return c
    }}}
return可以返回多个值，以逗号分隔。相当于返回一个tuple(定值表)。没有返回值的return语句等价于return None。None是Python中的一个特别的数据类型,相当于C中的NULL。None多用于关键字参数传递的默认值。

* 函数的参数，如果为数值类型，则为值传递,例如：
{{{
def func(a,b):
    c = a + b
    return c
}}}
* 如果参数为序列，则为指针传递,例如:
{{{
def func(l):
    l[0] = l[0] + 1
}}}
* 可以在函数定义的形参名后加上赋值运算符（=）和默认值，从而给形参指定默认参数值,例如：
{{{
def func(a,b=1):
    ...
}}}
* 通过命名来为这些参数赋值——这被称作 关键参数,用名字（关键字）而不是位置来给函数指定实参,例如：
{{{
def func(a, b=5, c=10):
    d = a + b + c
    print d
a = func(1,2)
a = func(1,c=24)
a = func(c=24, a=50)
}}}
* 包裹位置传递(不定长参数),例如：
{{{
def func(*name):
    ...
}}}
 在func的参数表中，所有的参数被name收集，根据位置合并成一个定值表(tuple)，这就是包裹位置传递(在name前加*)。
* 包裹关键字传递(不定长参数),
{{{
def func(**dict):
    ...
}}}
 dict是一个字典，收集所有的关键字，传递给函数func,参数名dict前加**

*和**在调用的时候的应用，主要是解包裹(unpacking)

DocStrings是一个重要的工具，由于它帮助你的程序文档更加简单易懂。文档字符串的惯例是一个多行字符串，它的首行以大写字母开始，句号结尾。第二行是空行，从第三行开始是详细的描述。可以使用`__doc__`调用函数的文档字符串属性（属于函数的名称）。可以用help(函数名)来抓取函数的`__doc__`属性，然后整洁地展示给你

* `lambda`是一种简便的，在同一行中定义函数的方法,例如：
{{{
func = lambda x,y: x + y
print func(3,4)
}}}
lambda以及之后的内容实际上生成一个函数对象(也就是函数)

* 函数可以作为一个对象进行参数传递。函数名(比如func)即指向该对象，不需要括号。 
* re = map(函数对象，参数表1, 参数表2 ...),map()的功能是将函数对象依次作用于表的每一个元素，每次作用的结果储存于返回的表re中。
* filter函数,如果函数对象返回的是True，则该次的元素被储存于返回的表中。filter通过读入的函数来筛选数据。
* reduce函数
=== 面向对象 ===
Python中通过使用类(class)和对象(object)来实现面向对象
定义类：
{{{
class class_name(parent_class):
    attribute1 = ...
    attribute2 = ...
    def method1(self,...):
        ...
    def method2(self,...):
        ...
    }}}
* 参数中有一个self，它是为了方便我们引用对象自身(代表的是对象本身，类似C++中的this指针)。方法的第一个参数必须是self，无论是否用到
* 建立对一个对象： 对象名 = 类名()
* 引用对象的属性： object.attribute
* `__init__()`方法
 Python里会有一些特殊方法，Python会以特别的方式处理它们。特殊方法的名字的特点是前后都有两个下划线。
 `__init__()`类似于C++中的构造函数
* 对象属性
dir()用来查询一个类或者对象所包含的属性（变量属性和方法属性）
=== 模块 ===
在Python中，一个.py文件就构成一个模块。通过模块，你可以调用其它文件中的程序。
通过关键字import引入模块。引入模块后，我们可以通过`模块.对象`的方式来调用模块中的对象。

Python会在以下路径中搜索它想要寻找的模块：
# 程序所在的文件夹
# 标准库的安装路径
# 操作系统环境变量PYTHONPATH所包含的路径
* 模块包
 可以将功能相似的模块放在同一个文件夹(例如路径PATH)中，通过 import PATH.module 的方式引入。
 注意：该文件夹中必须包含一个`__init__.py`的文件，以便提醒python知道该文件夹为一个模块包。`__init__.py`可以是一个空文件。
=== 词典 ===
词典可以储存多个元素。这种可以用来储存多个元素的对象统称为容器(container)。
词典的元素包含有两部分，键和值，常见的是以字符串来表示键，也可以使用数字或者真值来表示键（不可变的对象可以作为键）。值可以是任意对象。键和值两者一一对应。词典元素没有顺序。
对dictionary的元素进行循环调用：
{{{
dic = {'lilei': 90, 'lily': 100, 'sam': 57, 'tom': 90}
for key in dic:
    print dic[key]
    }}}
=== 文本操作 ===
f = open(文件名，模式)
| 常用模式 | >    |
|----------|------|
| "r"      | 只读 |
| "w"      | 写入 |

| 操作方法      | 功能                 |
|---------------|----------------------|
| f.read(N)     | 读取N bytes 数据     |
| f.readline()  | 读取一行             |
| f.readlines() | 读取所有行，储存在表 |
| \/            | 中，每个元素是一行   |
| f.write()     | 向文件写入内容       |
| f.close()     | 关闭文件             |

=== 循环操作 ===
* rang(begin, end , 步长)
* enumerate()在每次循环中，返回的是一个包含两个元素的定值表(tuple)(下标，元素)
* zip(), 实现并行循环,多个等长的序列，然后想要每次循环时从各个序列分别取出一个元素，可以利用zip()方便地实现
* 循环对象,它包含有一个next()方法(`__next__()`方法，在python 3x中)， 这个方法的目的是进行到下一个结果，而在结束一系列结果之后，举出StopIteration错误。在for循环中会自动调用next方法，在出现StopIteration时结束循环。
* iter()函数和循环器(iterator)
* 生成器(generator),其主要目的是构成一个用户自定义的循环对象。生成器的编写方法和函数定义类似，只是在return的地方改为yield。
* 生成器表达式(Generator Expression)
* 表推导(list comprehension)
=== 异常处理 ===
所有异常都从基类Exception继承，而且都在exceptions模块中定义。一旦引发而且没有捕捉SystemExit异常，程序执行就会终止。如果交互式会话遇到一个未被捕捉的SystemExit异常，会话就会终止。

使用except子句需要注意的事情，就是多个except子句截获异常时，如果各个异常类之间具有继承关系，则子类应该写在前面，否则父类将会直接截获子类异常。放在后面的子类异常也就不会执行到了。
{{{
try:
    ...
except exception1:
    ...
except exception2:
    ...
except:
    ...
else:
    ...
finally:
    ...
}}}
其执行流程如下：
`try->异常->except->finally`
`try->无异常->else->finally`

raise exception,可以自己抛出异常,例如：raise StopIteration()
