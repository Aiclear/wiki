vim操作
%toc 目录
== Visual Module操作 ==
* `ctrl-Q`命令可以进入块可视化模式(同ctrl-v)
* `gv`命令可以重复前一次可视化模式时选中的文本。如果已经在可视化模式下，执行该命令会选中前一次选择的文本。如果重复行执gv命令，就会在当前选中的文本和前一次选中的文本之间进行切换。
* `o`命令,如果你已经在可视化模式下选择了若干文本，并且希望移动到已选择文本的另一结尾处，可以使用该命令。
* `O`命令移动到同一行的另一个角落

== 高效率移动 ==
在插入模式之外

基本的上下左右移动：使用 h、j、k、l
当光标从一点移动到另外一点，在这两点之间的文本（包括这两个点）称作被“跨过”，这里的命令也被称作是 motion。

这里是常用到的一些命令（motion）：
* fx：移动光标到当前行的下一个 x 处。很明显，x 可以是任意一个字母，而且你可以使用 ; 来重复你的上一个 f 命令。
* tx：和上面的命令类似，但是是移动到 x 的左边一个位置。（这真的很有用）
* Fx：和 fx 类似，不过是往回找。
* w：移动光标至下一个单字的第一个字母。
* b：光标往后移动一个词。
* e：移动光标至该单字的最后一个字母
* 0：移动光标到当前行首。
* ^：移动光标到当前行的第一个字母位置。
* $：移动光标到行尾。
* )：移动光标到下一个句子。
* ( ：移动光标到上一个句子。
----
在整个文件里面有效移动光标:
* <C-f>：向下移动一屏(功能类似键盘中的<PageDown>)。
* <C-b>：向上移动一屏(功能类似键盘中的<PageUp>)。
* <C-d>：向下移动半屏。
* <C-u>：向上移动半屏。
* G：到文件尾
* numG：移动光标到指定的行（num）。（比如 10G 就是到第 10 行）
* :num 将光标移至档案第 num 行(如输入 :45，即移动至档案第 45 行)
* gg：到文件首
* H：移动光标到屏幕顶端
* M：移动光标到屏幕中间
* L：移动光标到屏幕底端
* *：读取光标处的字符串，并且移动光标到它再次出现的地方。
* #：和上面的类似，但是是往反方向寻找。
* /text：从当前光标处开始搜索字符串 text，并且到达 text 出现的地方。必须使用回车来开始这个搜索命令。如果想重复上次的搜索的话，按 n。
* ？text：和上面类似，但是是反方向。
* ma：在当前光标的位置标记一个书签，名字为 a。书签名只能是小写字母。你看不见书签的存在，但它确实已经在那里了。
* `a：到书签 a 处。注意这个不是单引号，它一般位于大部分键盘的 1 的左边。
* `.：到你上次编辑文件的地方。这个命令很有用，而且你不用自己去标记它。
